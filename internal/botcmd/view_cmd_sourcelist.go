package botcmd

import (
	"context"
	"fmt"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/samber/lo"
	"github.com/speeddem0n/GoNewsBot/internal/botkit"
	"github.com/speeddem0n/GoNewsBot/internal/botkit/markup"
	"github.com/speeddem0n/GoNewsBot/internal/models"
)

type SourceLister interface { // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ–µ–º storage
	Sources(ctx context.Context) ([]models.Source, error)
}

func ViewCmdListSources(lister SourceLister) botkit.ViewFunc { // View –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
	return func(ctx context.Context, bot *tgbotapi.BotAPI, update tgbotapi.Update) error {
		sources, err := lister.Sources(ctx)
		if err != nil {
			return err
		}

		var (
			sourcesInfo = lo.Map(sources, func(source models.Source, _ int) string {
				return formatSource(source)
			}) // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ —á–∏—Ç–∞–π–º—ã–π –≤–∏–¥
			msgText = fmt.Sprintf("–°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\\(–í—Å–µ–≥–æ %d\\):\n\n%s", len(sources), strings.Join(sourcesInfo, "\n\n")) // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±–∑–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		)

		reply := tgbotapi.NewMessage(update.Message.Chat.ID, msgText) // –§–æ—Ä–º–µ—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		reply.ParseMode = "MarkdownV2"                                // –û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ MarkdownV2

		if _, err := bot.Send(reply); err != nil { // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			return err
		}

		return nil
	}
}

func formatSource(source models.Source) string { // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
	return fmt.Sprintf("üåé *%s*\nID: `%d`\nURL feed: %s",
		markup.EscapeForMarkdown(source.Name), // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ markdown –≤ —Ç–µ–∫—Å—Ç–µ
		source.ID,
		markup.EscapeForMarkdown(source.FeedURL), // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ markdown –≤ —Ç–µ–∫—Å—Ç–µ
	)
}
